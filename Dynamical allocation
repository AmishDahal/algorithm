#include <stdio.h>
#include <stdlib.h>

#define RANGE_SIZE 100  // Size of each chunk of the range
#define NUM_BUCKETS 10000  // Number of chunks (for 1 to 10^9)

// Structure with 100 arrays
typedef struct {
    int bucket[RANGE_SIZE];  // Array to hold counts for a specific range
} RangeBucket;

// Function to find which bucket a value belongs to
int getBucketIndex(int value) {
    return (value - 1) / RANGE_SIZE;  // Find the bucket index based on the value
}

// Insert a value into the appropriate bucket
void insertIntoRangeBuckets(RangeBucket *buckets, int value) {
    int index = getBucketIndex(value);
    int bucketPos = (value - 1) % RANGE_SIZE;  // Position within the bucket
    buckets[index].bucket[bucketPos]++;
}

// Print the sorted array
void printSorted(RangeBucket *buckets) {
    for (int i = 0; i < NUM_BUCKETS; i++) {
        for (int j = 0; j < RANGE_SIZE; j++) {
            while (buckets[i].bucket[j]--) {  // Print each number based on its count
                printf("%d ", (i * RANGE_SIZE) + j + 1);
            }
        }
    }
    printf("\n");
}

int main() {
    // Allocate the buckets
    RangeBucket *buckets = (RangeBucket *)calloc(NUM_BUCKETS, sizeof(RangeBucket));

    int n, value;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    
    printf("Enter %d numbers (range 1 to 10^9):\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &value);
        insertIntoRangeBuckets(buckets, value);
    }

    // Print sorted array
    printf("Sorted array: ");
    printSorted(buckets);

    free(buckets);
    return 0;
}
