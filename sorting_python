import random
import time
from multiprocessing import Pool

# Hybrid Sorting Function to Sort Buckets
def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

# Function to handle each bucket in parallel
def sort_bucket(bucket):
    if len(bucket) > 10:
        return quicksort(bucket)
    else:
        return sorted(bucket)  # Use Python's built-in sort for smaller buckets

# Optimized AmishSort with Parallelization
def parallel_amishsort(arr):
    if len(arr) <= 1:
        return arr
    
    min_val = min(arr)
    max_val = max(arr)
    
    num_buckets = int(len(arr) ** 0.5)  # Approximate number of buckets
    bucket_size = (max_val - min_val) // num_buckets + 1
    
    buckets = {i: [] for i in range(num_buckets)}
    
    # Distribute elements into buckets
    for num in arr:
        bucket_index = (num - min_val) // bucket_size
        buckets[bucket_index].append(num)
    
    # Use multiprocessing to sort buckets in parallel
    with Pool() as pool:
        sorted_buckets = pool.map(sort_bucket, buckets.values())
    
    # Combine all sorted buckets
    sorted_arr = [item for sublist in sorted_buckets for item in sublist]
    return sorted_arr

# Example usage
data = [random.randint(1, 1000) for _ in range(10000)]

# Measure the performance of Parallel AmishSort
start_time = time.time()
parallel_amishsort_result = parallel_amishsort(data)
parallel_amishsort_time = time.time() - start_time

print(f"Parallel AmishSort Time: {parallel_amishsort_time:.6f} seconds")
