#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Helper function to swap elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Quick Sort Algorithm
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivot = arr[high];
        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] <= pivot) {
                i++;
                swap(&arr[i], &arr[j]);
            }
        }
        swap(&arr[i + 1], &arr[high]);

        int pi = i + 1;
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Insertion Sort for small subarrays
void insertionSort(int arr[], int low, int high) {
    for (int i = low + 1; i <= high; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= low && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

// Merge Sort
void merge(int arr[], int low, int mid, int high) {
    int left_size = mid - low + 1;
    int right_size = high - mid;

    int* left = (int*)malloc(left_size * sizeof(int));
    int* right = (int*)malloc(right_size * sizeof(int));

    for (int i = 0; i < left_size; i++)
        left[i] = arr[low + i];

    for (int i = 0; i < right_size; i++)
        right[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = low;
    while (i < left_size && j < right_size) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }

    while (i < left_size) {
        arr[k] = left[i];
        i++;
        k++;
    }

    while (j < right_size) {
        arr[k] = right[j];
        j++;
        k++;
    }

    free(left);
    free(right);
}

void mergeSort(int arr[], int low, int high) {
    if (low < high) {
        int mid = low + (high - low) / 2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
}

// Hybrid Sort Function (Fluid Sorting)
void hybridSort(int arr[], int low, int high) {
    // Switch to Insertion Sort for small subarrays
    if (high - low < 10) {
        insertionSort(arr, low, high);
        return;
    }

    // Quick Sort for larger arrays
    if (high - low > 1000) {
        quickSort(arr, low, high);
        return;
    }

    // Merge Sort for larger subarrays (optimal for large but stable data)
    mergeSort(arr, low, high);
}

// Timing function to measure sort performance
void measureSortingTime(void (*sortFunction)(int[], int, int), int arr[], int low, int high) {
    clock_t start_time = clock();
    sortFunction(arr, low, high);
    clock_t end_time = clock();
    
    double time_taken = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
    printf("Time taken: %.5f seconds\n", time_taken);
}

int main() {
    int n = 10000;  // Example size, you can change for testing
    
    // Generating random data for testing
    int *arr1 = (int *)malloc(n * sizeof(int));
    int *arr2 = (int *)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        arr1[i] = rand() % 10000;  // Random numbers between 0 and 10000
        arr2[i] = arr1[i];  // Copy for second sorting method
    }

    // Measure Fluid Hybrid Sort Time
    printf("Hybrid Sort:\n");
    measureSortingTime(hybridSort, arr1, 0, n - 1);

    // Measure Quick Sort Time
    printf("Quick Sort:\n");
    measureSortingTime(quickSort, arr2, 0, n - 1);

    free(arr1);
    free(arr2);

    return 0;
}
